/* universial selector */
*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

html {
    /* 10/16px */
    font-size: 62.5%;
}

body {
    font-family: 'Lato', sans-serif;
    font-weight: 400;
    /* font-size: 16px; */
    line-height: 1.7;
    color: #777;
    padding: 3rem;

    /* box-sizing makes the borders and the paddings are no longer added to the total width or the total height */
    box-sizing: border-box;
}

.header {
    height: 95vh;
    background-image: linear-gradient(to right bottom, #7ed56fcb, #28b485cb), url(../img/hero.jpg);
    /* whatever the width of the viewport, or the element, it'll always try to fit the element inside of the box. */
    background-size: cover;
    /* when the screen change, the top of the image stay same, and others crop */
    background-position: top;
    position: relative;

    /* crop from top-left, top-right, bottom-rignt, bottom-left*/
    /* https://bennettfeely.com/clippy/ */
    clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
}

.header__logo-box {
    /* need parent position to relative */
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* the relation of transform is the element itself, and make the element is exactly at the center */
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #ffffff;
    text-transform: uppercase;

    /* determines if the back part of the element when we transform it, this can fix animation shaking */
    backface-visibility: hidden;
    margin-bottom: 6rem;
}

.heading-primary--main {
    /* display it as a block */
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;

    /* 
    animation-iteration-count: 3;
    animation-delay: 1s; 
    */
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
    /* start at 0 */
    0% {
        opacity: 0;
        /* positive value means it goes to the right, negative goes to left */
        transform: translateX(-10rem) rotate(-50deg);
    }

    /* 60% {
        transform: rotate(120deg);
    } */

    80% {
        transform: translateX(1rem);
    }

    /* end at 100 */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    /* start at 0 */
    0% {
        opacity: 0;
        /* positive value means it goes to the right, negative goes to left */
        transform: translateX(10rem);
    }

    80% {
        transform: translateX(-1rem);
    }

    /* end at 100 */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    /* start at 0 */
    0% {
        opacity: 0;
        /* positive value means it goes to the right, negative goes to left */
        transform: translateY(3rem);
    }

    /* end at 100 */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

/* link pseudo clases, a special state of a selector */
.btn:link,
/* visited state, the state when the user has already clicked */
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* should always do this when we have paddings or width to elements */
    display: inline-block;
    border-radius: 10rem;
    /* specify all porperties to animate */
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem;
}

.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

/* when button is been clicked */
.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 5px 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
    background-color: #ffffff;
    color: #777;
}

/* 
 * after pseudo-element, add an element that looks exactly like the button that we already have, but put it behind the button
 * And when we hover out of the button, then this hidden pseudo-element amazingly goes back behind the button.
 */
.btn::after {
    content: '';
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* this absolute positioning needs to have a reference, which is the first element with the relative position that it can find .*/
    position: absolute;
    top: 0;
    left: 0;
    /* position of the elements if they are one on top of another. */
    z-index: -1;
    transition: all, 0.4s;
}

.btn--white::after {
    background-color: #fff;
}

/* So this is an after pseudo-element only when we have the button on the hover state. */
.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.2);
    opacity: 0;
}

.btn--animated {
    animation: moveInBottom 0.5s ease-out 0.7s;

    /* it will automatically apply the styles up to zero percent before the animation starts. Othervise it will show in the initial stage */
    animation-fill-mode: backwards;
}

/* @media (max-width: 800px) {
    html {
        font-size: 9px;
    }
}
@media (max-width: 720px) {
    html {
        font-size: 7px;
    }
}
@media (max-width: 420px) {
    html {
        font-size: 5px;
    }
}
@media (max-width: 321px) {
    html {
        font-size: 4px;
    }
} */
